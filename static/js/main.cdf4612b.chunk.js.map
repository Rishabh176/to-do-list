{"version":3,"sources":["components/Todoitem.js","components/Todolist.js","components/Todoinput.js","App.js","serviceWorker.js","index.js"],"names":["Todoitem","ev","persist","dataTransfer","effectAllowed","setData","JSON","stringify","this","props","setDragImage","target","_this","_this$props","title","handledelete","handledit","react_default","a","createElement","draggable","onDragStart","dragStart","className","onClick","Component","Todolist","preventDefault","src","getData","parse","keyName","dropChange","items","clearlist","onDrop","handleDrop","onDragOver","dropOver","map","item","Todoitem_Todoitem","key","id","keyId","type","Todoinput","state","uuid","edit","handleChange","e","setState","value","handleSubmit","newitems","updateditems","concat","Object","toConsumableArray","console","log","filters","filter","select","find","onSubmit","placeholder","onChange","Todolist_Todolist","App","item1","item2","item3","data","Todoinput_Todoinput","changeState","manageState","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cdf4612b.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class Todoitem extends Component {\r\n  \r\n    dragStart(ev) {\r\n        ev.persist();\r\n        ev.dataTransfer.effectAllowed = 'move';\r\n        ev.dataTransfer.setData(\"Text\",JSON.stringify(this.props));\r\n        ev.dataTransfer.setDragImage(ev.target,0,0);\r\n    }\r\n    \r\n    \r\n  render() {\r\n    const {title, handledelete, handledit} = this.props;\r\n    return (\r\n      <div draggable=\"true\" onDragStart={(ev)=>{this.dragStart(ev)}}>\r\n        <li className=\"list-group-item text-capitalize d-flex justify-content-between my-2\">\r\n        <h6>{title}</h6>\r\n        <div className=\"todo-icon\">\r\n            <span className=\"mx-2 text-success\" onClick={handledit}>\r\n                <i className=\"fas fa-pen\" />\r\n            </span>\r\n            <span className=\"mx-2 text-danger\" onClick={handledelete}>\r\n                <i className=\"fas fa-trash\" />\r\n            </span>\r\n        </div>\r\n        </li>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n","import React, { Component } from 'react'\r\nimport Todoitem from './Todoitem'\r\n\r\nexport default class Todolist extends Component {\r\n    dropOver(ev){\r\n        ev.preventDefault();\r\n    }\r\n    handleDrop(ev){\r\n        let src = ev.dataTransfer.getData(\"Text\");\r\n        src=JSON.parse(src)\r\n        if(src.keyName!=this.props.keyName)\r\n            this.props.dropChange(src);\r\n    }\r\n    render() {\r\n    const {items, clearlist, handledelete, handledit,dropChange} = this.props;\r\n    return (\r\n      <div onDrop={(ev)=>{this.handleDrop(ev)}} onDragOver={(ev)=>{this.dropOver(ev)}} >\r\n          <ul className=\"list-group my-5\" >\r\n            <h3 className=\"text-capitalize text-center\">todo list</h3>\r\n            {\r\n                items.map(item => {\r\n                    return  <Todoitem  \r\n                    key={item.id}\r\n                    keyId={item.id}\r\n                    keyName={this.props.keyName} \r\n                    title={item.title}\r\n                    handledelete={() => handledelete(item.id)}\r\n                    handledit={()=> handledit(item.id)}\r\n                    />\r\n                })\r\n            }\r\n            <button \r\n                type=\"button\" \r\n                className=\"btn btn-danger btn-block text-capitalize mt-5\"\r\n                onClick={clearlist}\r\n            >\r\n                clear list\r\n            </button>\r\n          </ul>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Todolist from './Todolist';\r\nimport uuid  from 'uuid';\r\n\r\nexport default class Todoinput extends Component {\r\n    state ={\r\n        items: [],\r\n        id:uuid(),\r\n        item: \"\",\r\n        edit: false\r\n      };\r\n      handleChange = (e) => {\r\n        this.setState({\r\n          item: e.target.value\r\n        });\r\n      };\r\n    handleSubmit =(e)=>{\r\n        e.preventDefault();\r\n        const newitems= {\r\n          id: this.state.id,\r\n          title: this.state.item\r\n        }\r\n        const updateditems =[...this.state.items, newitems];\r\n        this.setState({\r\n          items:updateditems,\r\n          item:'',\r\n          id:uuid(),\r\n          edit: false\r\n        });\r\n      };\r\n\r\n    clearlist =() => {\r\n        this.setState({\r\n          items: []\r\n        })\r\n      }\r\n      \r\n    handledelete = (id) => {\r\n          console.log(this.state)\r\n          console.log(id)\r\n        const filters = this.state.items.filter(item => \r\n          item.id !== id)\r\n        this.setState({\r\n          items: filters\r\n        });\r\n      };\r\n    \r\n    dropChange=(src)=>{\r\n        const newitems= {\r\n            id: src.keyId,\r\n            title: src.title\r\n        }  \r\n        const updateditems =[...this.state.items, newitems];\r\n        this.setState({\r\n          items:updateditems,\r\n          item:'',\r\n          id:uuid(),\r\n          edit: false\r\n        });\r\n    }\r\n\r\n    handledit =(id) => {\r\n        const filters = this.state.items.filter(item => \r\n          item.id !== id);\r\n        \r\n        const select = this.state.items.find(item => item.id === id);\r\n       \r\n          this.setState({\r\n            items: filters,\r\n            item: select.title,\r\n            edit: true,\r\n            id:id\r\n          })\r\n      };\r\n\r\n    render() {\r\n    return (\r\n      <div className=\"card card-body my-3\" id={this.props.keyName}>\r\n        <form onSubmit={this.handleSubmit}>\r\n            <div className=\"input-group\">\r\n                <div className=\"input-group-prepend\">\r\n                    <div className=\"input-group-text bg-primary text-white\">\r\n                        <i className=\"fas fa-book\" />\r\n                    </div>\r\n                </div>\r\n                <input \r\n                    type=\"text\" \r\n                    className=\"form-control text-capitalize\" \r\n                    placeholder=\"add a todo list\" \r\n                    value={this.state.item} onChange={this.handleChange}/>\r\n            </div>\r\n            <button type=\"submit\" \r\n            className={\r\n                this.state.edit ?\r\n                \"btn btn-block btn-success mt-3\"\r\n                : \"btn btn-block btn-primary mt-3\"\r\n            }>\r\n             {this.state.edit ? \"edit item\" : \"add item\"}\r\n            </button>\r\n        </form>\r\n        <Todolist\r\n            keyName={this.props.keyName}\r\n            items={this.state.items}\r\n            clearlist={this.clearlist}\r\n            handledelete={this.handledelete}\r\n            handledit={this.handledit}\r\n            dropChange={this.dropChange}\r\n        />\r\n    </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\nimport Todoinput from './components/Todoinput';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\n\nclass App extends Component {\n  state={\n    item1:[],\n    item2:[],\n    item3:[]\n  }\n\n  manageState(data){\n    this.setState({\n      data\n    })\n  }\n\n  changeState(data){\n  \n  }\n\n  render() {  \n   return (\n      <div>\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-10 mx-autho col-md-4 mt-4\">\n            <h3 className=\"text-capitalize text-center\">Enter Item</h3>\n              <Todoinput keyName=\"todo\" changeState={this.changeState} manageState={this.manageState}/>\n            </div>\n            <div className=\"col-10 mx-autho col-md-4 mt-4\">\n            <h3 className=\"text-capitalize text-center\">Doing</h3>\n              <Todoinput keyName=\"doing\" changeState={this.changeState} manageState={this.manageState}/>\n            </div>\n            <div className=\"col-10 mx-autho col-md-4 mt-4\">\n            <h3 className=\"text-capitalize text-center\">Done</h3>\n              <Todoinput keyName=\"completed\" changeState={this.changeState} manageState={this.manageState}/>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}